Traceback (most recent call last):
  File "/home/codespace/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Step B: Load ZIP code boundaries and filter for Cook County
zip_gdf = gpd.read_file('data/cook_county_filtered_zips.shp')

filtered_zip_gdf = zip_gdf[zip_gdf['ZCTA5CE20'].isin(df['address_zip'])]
# filtered_zip_gdf = filtered_zip_gdf.set_index('ZCTA5CE20').join(zip_counts.set_index('address_zip')).reset_index() 
# ^ this line has been commented out because this is not required anymore after optimizing the initial version of this shapefile

print(filtered_zip_gdf.count())
------------------


[31m---------------------------------------------------------------------------[39m
[31mDataSourceError[39m                           Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 2[39m
[32m      1[39m [38;5;66;03m# Step B: Load ZIP code boundaries and filter for Cook County[39;00m
[32m----> [39m[32m2[39m zip_gdf = [43mgpd[49m[43m.[49m[43mread_file[49m[43m([49m[33;43m'[39;49m[33;43mdata/cook_county_filtered_zips.shp[39;49m[33;43m'[39;49m[43m)[49m
[32m      4[39m filtered_zip_gdf = zip_gdf[zip_gdf[[33m'[39m[33mZCTA5CE20[39m[33m'[39m].isin(df[[33m'[39m[33maddress_zip[39m[33m'[39m])]
[32m      5[39m [38;5;66;03m# filtered_zip_gdf = filtered_zip_gdf.set_index('ZCTA5CE20').join(zip_counts.set_index('address_zip')).reset_index() [39;00m
[32m      6[39m [38;5;66;03m# ^ this line has been commented out because this is not required anymore after optimizing the initial version of this shapefile[39;00m

[36mFile [39m[32m~/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/geopandas/io/file.py:316[39m, in [36m_read_file[39m[34m(filename, bbox, mask, columns, rows, engine, **kwargs)[39m
[32m    313[39m             filename = response.read()
[32m    315[39m [38;5;28;01mif[39;00m engine == [33m"[39m[33mpyogrio[39m[33m"[39m:
[32m--> [39m[32m316[39m     [38;5;28;01mreturn[39;00m [43m_read_file_pyogrio[49m[43m([49m
[32m    317[39m [43m        [49m[43mfilename[49m[43m,[49m[43m [49m[43mbbox[49m[43m=[49m[43mbbox[49m[43m,[49m[43m [49m[43mmask[49m[43m=[49m[43mmask[49m[43m,[49m[43m [49m[43mcolumns[49m[43m=[49m[43mcolumns[49m[43m,[49m[43m [49m[43mrows[49m[43m=[49m[43mrows[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m
[32m    318[39m [43m    [49m[43m)[49m
[32m    320[39m [38;5;28;01melif[39;00m engine == [33m"[39m[33mfiona[39m[33m"[39m:
[32m    321[39m     [38;5;28;01mif[39;00m pd.api.types.is_file_like(filename):

[36mFile [39m[32m~/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/geopandas/io/file.py:576[39m, in [36m_read_file_pyogrio[39m[34m(path_or_bytes, bbox, mask, rows, **kwargs)[39m
[32m    567[39m     warnings.warn(
[32m    568[39m         [33m"[39m[33mThe [39m[33m'[39m[33minclude_fields[39m[33m'[39m[33m and [39m[33m'[39m[33mignore_fields[39m[33m'[39m[33m keywords are deprecated, and [39m[33m"[39m
[32m    569[39m         [33m"[39m[33mwill be removed in a future release. You can use the [39m[33m'[39m[33mcolumns[39m[33m'[39m[33m keyword [39m[33m"[39m
[32m   (...)[39m[32m    572[39m         stacklevel=[32m3[39m,
[32m    573[39m     )
[32m    574[39m     kwargs[[33m"[39m[33mcolumns[39m[33m"[39m] = kwargs.pop([33m"[39m[33minclude_fields[39m[33m"[39m)
[32m--> [39m[32m576[39m [38;5;28;01mreturn[39;00m [43mpyogrio[49m[43m.[49m[43mread_dataframe[49m[43m([49m[43mpath_or_bytes[49m[43m,[49m[43m [49m[43mbbox[49m[43m=[49m[43mbbox[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/pyogrio/geopandas.py:275[39m, in [36mread_dataframe[39m[34m(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, fid_as_index, use_arrow, on_invalid, arrow_to_pandas_kwargs, **kwargs)[39m
[32m    270[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m use_arrow:
[32m    271[39m     [38;5;66;03m# For arrow, datetimes are read as is.[39;00m
[32m    272[39m     [38;5;66;03m# For numpy IO, datetimes are read as string values to preserve timezone info[39;00m
[32m    273[39m     [38;5;66;03m# as numpy does not directly support timezones.[39;00m
[32m    274[39m     kwargs[[33m"[39m[33mdatetime_as_string[39m[33m"[39m] = [38;5;28;01mTrue[39;00m
[32m--> [39m[32m275[39m result = [43mread_func[49m[43m([49m
[32m    276[39m [43m    [49m[43mpath_or_buffer[49m[43m,[49m
[32m    277[39m [43m    [49m[43mlayer[49m[43m=[49m[43mlayer[49m[43m,[49m
[32m    278[39m [43m    [49m[43mencoding[49m[43m=[49m[43mencoding[49m[43m,[49m
[32m    279[39m [43m    [49m[43mcolumns[49m[43m=[49m[43mcolumns[49m[43m,[49m
[32m    280[39m [43m    [49m[43mread_geometry[49m[43m=[49m[43mread_geometry[49m[43m,[49m
[32m    281[39m [43m    [49m[43mforce_2d[49m[43m=[49m[43mgdal_force_2d[49m[43m,[49m
[32m    282[39m [43m    [49m[43mskip_features[49m[43m=[49m[43mskip_features[49m[43m,[49m
[32m    283[39m [43m    [49m[43mmax_features[49m[43m=[49m[43mmax_features[49m[43m,[49m
[32m    284[39m [43m    [49m[43mwhere[49m[43m=[49m[43mwhere[49m[43m,[49m
[32m    285[39m [43m    [49m[43mbbox[49m[43m=[49m[43mbbox[49m[43m,[49m
[32m    286[39m [43m    [49m[43mmask[49m[43m=[49m[43mmask[49m[43m,[49m
[32m    287[39m [43m    [49m[43mfids[49m[43m=[49m[43mfids[49m[43m,[49m
[32m    288[39m [43m    [49m[43msql[49m[43m=[49m[43msql[49m[43m,[49m
[32m    289[39m [43m    [49m[43msql_dialect[49m[43m=[49m[43msql_dialect[49m[43m,[49m
[32m    290[39m [43m    [49m[43mreturn_fids[49m[43m=[49m[43mfid_as_index[49m[43m,[49m
[32m    291[39m [43m    [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m,[49m
[32m    292[39m [43m[49m[43m)[49m
[32m    294[39m [38;5;28;01mif[39;00m use_arrow:
[32m    295[39m     [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mpyarrow[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpa[39;00m

[36mFile [39m[32m~/.cache/pypoetry/virtualenvs/inst204-audit1-1vNJ9HgR-py3.12/lib/python3.12/site-packages/pyogrio/raw.py:198[39m, in [36mread[39m[34m(path_or_buffer, layer, encoding, columns, read_geometry, force_2d, skip_features, max_features, where, bbox, mask, fids, sql, sql_dialect, return_fids, datetime_as_string, **kwargs)[39m
[32m     59[39m [38;5;250m[39m[33;03m"""Read OGR data source into numpy arrays.[39;00m
[32m     60[39m 
[32m     61[39m [33;03mIMPORTANT: non-linear geometry types (e.g., MultiSurface) are converted[39;00m
[32m   (...)[39m[32m    194[39m 
[32m    195[39m [33;03m"""[39;00m
[32m    196[39m dataset_kwargs = _preprocess_options_key_value(kwargs) [38;5;28;01mif[39;00m kwargs [38;5;28;01melse[39;00m {}
[32m--> [39m[32m198[39m [38;5;28;01mreturn[39;00m [43mogr_read[49m[43m([49m
[32m    199[39m [43m    [49m[43mget_vsi_path_or_buffer[49m[43m([49m[43mpath_or_buffer[49m[43m)[49m[43m,[49m
[32m    200[39m [43m    [49m[43mlayer[49m[43m=[49m[43mlayer[49m[43m,[49m
[32m    201[39m [43m    [49m[43mencoding[49m[43m=[49m[43mencoding[49m[43m,[49m
[32m    202[39m [43m    [49m[43mcolumns[49m[43m=[49m[43mcolumns[49m[43m,[49m
[32m    203[39m [43m    [49m[43mread_geometry[49m[43m=[49m[43mread_geometry[49m[43m,[49m
[32m    204[39m [43m    [49m[43mforce_2d[49m[43m=[49m[43mforce_2d[49m[43m,[49m
[32m    205[39m [43m    [49m[43mskip_features[49m[43m=[49m[43mskip_features[49m[43m,[49m
[32m    206[39m [43m    [49m[43mmax_features[49m[43m=[49m[43mmax_features[49m[43m [49m[38;5;129;43;01mor[39;49;00m[43m [49m[32;43m0[39;49m[43m,[49m
[32m    207[39m [43m    [49m[43mwhere[49m[43m=[49m[43mwhere[49m[43m,[49m
[32m    208[39m [43m    [49m[43mbbox[49m[43m=[49m[43mbbox[49m[43m,[49m
[32m    209[39m [43m    [49m[43mmask[49m[43m=[49m[43m_mask_to_wkb[49m[43m([49m[43mmask[49m[43m)[49m[43m,[49m
[32m    210[39m [43m    [49m[43mfids[49m[43m=[49m[43mfids[49m[43m,[49m
[32m    211[39m [43m    [49m[43msql[49m[43m=[49m[43msql[49m[43m,[49m
[32m    212[39m [43m    [49m[43msql_dialect[49m[43m=[49m[43msql_dialect[49m[43m,[49m
[32m    213[39m [43m    [49m[43mreturn_fids[49m[43m=[49m[43mreturn_fids[49m[43m,[49m
[32m    214[39m [43m    [49m[43mdataset_kwargs[49m[43m=[49m[43mdataset_kwargs[49m[43m,[49m
[32m    215[39m [43m    [49m[43mdatetime_as_string[49m[43m=[49m[43mdatetime_as_string[49m[43m,[49m
[32m    216[39m [43m[49m[43m)[49m

[36mFile [39m[32mpyogrio/_io.pyx:1313[39m, in [36mpyogrio._io.ogr_read[39m[34m()[39m

[36mFile [39m[32mpyogrio/_io.pyx:227[39m, in [36mpyogrio._io.ogr_open[39m[34m()[39m

[31mDataSourceError[39m: 'data/cook_county_filtered_zips.shp' not recognized as being in a supported file format.; It might help to specify the correct driver explicitly by prefixing the file path with '<DRIVER>:', e.g. 'CSV:path'.

